{"remainingRequest":"/home/chiboy/lampstack-8.0.5-0/apache2/htdocs/bukassa-web/node_modules/babel-loader/lib/index.js!/home/chiboy/lampstack-8.0.5-0/apache2/htdocs/bukassa-web/src/store/index.js","dependencies":[{"path":"/home/chiboy/lampstack-8.0.5-0/apache2/htdocs/bukassa-web/src/store/index.js","mtime":1642679473366},{"path":"/home/chiboy/lampstack-8.0.5-0/apache2/htdocs/bukassa-web/node_modules/cache-loader/dist/cjs.js","mtime":1642684430840},{"path":"/home/chiboy/lampstack-8.0.5-0/apache2/htdocs/bukassa-web/node_modules/babel-loader/lib/index.js","mtime":1642684434751}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/chiboy/lampstack-8.0.5-0/apache2/htdocs/bukassa-web/src/store/index.js"],"names":["createStore","net","axios","baseURL","process","env","VUE_APP_API_BASE_URL","state","isSignedIn","token","localStorage","getItem","user","tutor","tutors","prefCurrency","JSON","parse","prefLanguage","bookingInfo","counter","tempRoute","class","role","communityLanguage","communityLanguages","mutations","changePrefCurrency","payload","selectedCurrency","currencyName","currency_name","abbr","display_name","rateFromDollar","symbol","value","setItem","stringify","changePrefLanguage","selectedlang","store_event","saveUser","store_user","store_tutor","store_tutors","store_token","save_class_info","clear_user","removeItem","commit","update_auth_status","auth_success","store_user_role","clear_user_role","store_community_language","store_community_languages","actions","storerole","Promise","resolve","signin","reject","post","then","response","data","catch","error","updatesigninstatus","register","signout","fetchuserdata","headers","get","fetchtutordata","email","console","log","submittutorapplication","createlesson","fetchtutors","fetchtutor","storenewevent","createevent","tutorname","newevent","updatedUserInfo","sendmessage","messages","fetchmessages","fetchuser","setupclass","edittutorprofile","endpoint","clearrole","storecommunitylanguage","fetchcommunityquestions","url","fetchcommunityquestion","createquestion","submitcomment","fetchcommunitylanguages","submitcommentreply","submitreplytoreply","submitwithdrawalrequest","getters","registrationRole","userData","tutorData","bookingData","classData"],"mappings":"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","sourcesContent":["import { createStore } from 'vuex';\nimport net from \"../services/http\";\nimport axios from \"axios\";\n\nconst baseURL = process.env.VUE_APP_API_BASE_URL;\n\nexport default createStore({\n    state: {\n        isSignedIn: false,\n        token: localStorage.getItem('access-token') || '',\n        user: '',\n        tutor: '',\n        tutors: [],\n        prefCurrency: JSON.parse(localStorage.getItem('currency')),\n        prefLanguage: localStorage.getItem('language'),\n        bookingInfo: '',\n        counter: 0,\n        tempRoute: '',\n        class: '',\n        role: '',\n        communityLanguage: 'english',\n        communityLanguages: ['']\n    },\n    mutations: {\n        changePrefCurrency(state, payload){\n            var selectedCurrency = {\n                currencyName: payload.currency_name,\n                abbr: payload.display_name,\n                rateFromDollar: payload.rateFromDollar,\n                symbol: payload.value\n            };\n            \n            localStorage.setItem(\n                \"currency\", \n                JSON.stringify(selectedCurrency)\n            );\n            \n            state.prefCurrency = selectedCurrency;\n        },\n        changePrefLanguage(state, payload){\n            var selectedlang = payload.value;\n            \n            localStorage.setItem('language', selectedlang);\n            state.prefLanguage = selectedlang;\n        },\n        store_event(state, payload) {\n            localStorage.setItem('bookinginfo', JSON.stringify(payload));\n            state.bookingInfo = payload;\n        },\n        saveUser(state, payload) {\n            localStorage.setItem('user', JSON.stringify(payload));\n            state.user = payload;\n        },\n        store_user(state, payload) {\n            state.user = payload;\n        },\n        store_tutor(state, payload) {\n            state.tutor = payload;\n        },\n        store_tutors(state, payload) {\n            state.tutors = payload;\n        },\n        store_token(state, payload) {\n            localStorage.setItem('access-token', payload);\n            state.token = payload;\n        },\n        save_class_info(state, payload) {\n            state.class = payload;\n        },\n        clear_user(state) {\n            state.user = {};\n            state.token = '';\n            localStorage.removeItem('access-token');\n            this.commit('update_auth_status', true);\n        },\n        update_auth_status(state, payload) {\n            state.isSignedIn = payload;\n        },\n        auth_success(state, payload) {\n            this.commit('store_token', payload.token);\n            this.commit('store_user', payload.user);\n            this.commit('update_auth_status', true);\n        },\n        store_user_role(state, payload) {\n            state.role = payload;\n        },\n        clear_user_role(state, payload) {\n            state.role = '';\n        },\n        store_community_language(state, payload) {\n            state.communityLanguage = payload;\n        },\n        store_community_languages(state, payload) {\n            state.communityLanguages = payload;\n        }\n    },\n    actions: { \n        storerole({commit}, payload){\n            return new Promise((resolve)=> {\n                commit('store_user_role', payload);\n                resolve();\n            })\n        },\n        signin({commit}, payload) {    \n            return new Promise( async (resolve, reject)=>{\n                await axios.post(`${baseURL}/user/auth`,  payload)\n                .then((response)=> {\n                    const token = response.data.token,\n                    user = response.data.user;\n\n                    commit('auth_success', { token, user });\n\n                    resolve();\n\n                })\n                .catch((error)=> {\n                    commit('clear_user');\n                    reject(error);\n                });\n            });\n        },\n        updatesigninstatus({commit}, payload){\n            return new Promise(async (resolve, reject)=> {\n                commit('update_auth_status', payload);\n                resolve();\n            });\n        },\n        register({commit}, payload) {    \n            return new Promise( async (resolve, reject)=>{\n                await axios.post(`${baseURL}/user/register`, payload)\n                .then((response)=> {\n                    const token = response.data.token,\n                    user = response.data.user;\n\n                    commit('auth_success', { token, user });\n                    commit('clear_user_role');\n\n                    resolve();\n\n                })\n                .catch((error)=> {\n                    commit('clear_user');\n                    commit('clear_user_role');\n\n                    reject(error);\n                });\n            });\n        },\n        signout({commit}) {\n            return new Promise( resolve=> {\n                commit('clear_user');\n                commit('clear_user_role');\n                \n                resolve();\n            });\n        },\n        fetchuserdata({commit}) {\n            return new Promise(async (resolve, reject)=> {\n                \n                const headers = { 'x-access-token':`Bearer ${this.state.token}` }\n                \n                await axios.get(\n                    `${baseURL}/user/profile/me`,\n                    { headers: headers }\n                )\n                .then((response)=> {\n              \n                    const user = response.data.user;\n                    commit('store_user', user);\n\n                    resolve(user);\n                })\n                .catch((error)=> {\n                    reject(error);\n                });\n            });\n        },\n        fetchtutordata({commit}) {\n            return new Promise(async (resolve, reject)=> {\n\n                const headers = { 'x-access-token':`Bearer ${this.state.token}` };\n\n                await axios.get(\n                    `${baseURL}/tutors/me/${this.state.user.email}`,\n                    { headers: headers }\n                )\n                .then((response)=> {\n                    const tutor = response.data.data;\n                    commit('store_tutor', tutor);\n                    \n                    resolve();\n                })\n                .catch((error)=> {\n                    console.log(error.response);\n                    reject(error);\n                });\n            });\n        },\n        submittutorapplication({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                \n                const headers = {\n                    'Content-Type': 'multipart/form-data',\n                    'x-access-token':`Bearer ${this.state.token}`\n                };\n                \n                await axios.post(`${baseURL}/tutors/becometutor`, payload, \n                    { headers: headers })\n                .then((response)=> {\n                    \n                    const tutor = response.data.tutor,\n                    user = response.data.user;\n\n                    commit('store_tutor', tutor);\n                    commit('store_user', user);\n\n                    resolve();\n                })\n                .catch((error)=> {\n                    console.log(error.response);\n                    reject(error);\n                });\n            });\n        },\n        createlesson({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                const headers = { 'x-access-token':`Bearer ${this.state.token}` };\n\n                await axios.post(\n                    `${baseURL}/tutors/createlesson`, payload,\n                    { headers: headers }\n                )\n                .then((response)=> {\n                    const tutor = response.data.tutor;\n                    commit('store_tutor', tutor);\n\n                    resolve();\n                })\n                .catch((error)=> reject(error));\n            });\n        },\n        fetchtutors({commit}) {\n            return new Promise(async (resolve, reject)=> {\n                await axios.get(`${baseURL}/tutors/explore`)\n                .then((response)=> {                \n                    const tutors = response.data.data;\n                    commit('store_tutors', tutors);\n\n                    resolve(tutors);\n                })\n                .catch((error)=> {\n                    console.log(error);\n                    reject(error);\n                });\n            });\n        },\n        fetchtutor({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                await axios.get(`${baseURL}/tutors/explore/${payload}`)\n                .then((response)=> {\n                    const tutor = response.data.data;\n                    resolve(tutor);\n                })\n                .catch((error)=> {\n                    console.log(error);\n                    reject(error);\n                });\n            });\n        },\n        storenewevent({commit}, payload) {\n            commit('store_event', payload);\n        },\n        createevent({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                const headers= { 'x-access-token':`Bearer ${this.state.token}` };\n                \n                await axios.post(\n                    `${baseURL}/tutors/${payload.tutorname}/newevent`, \n                    { newevent: payload },\n                    { headers: headers }\n                ).then((updatedUserInfo)=> {\n                    commit('store_user', updatedUserInfo);\n                    resolve();\n\n                }).catch((error)=> {\n                    console.log(error);\n                    reject(error)\n\n                });\n            });\n        },\n        sendmessage({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                const headers= {'x-access-token':`Bearer ${this.state.token}`};\n\n                await axios.post(\n                    `${baseURL}/chat/sendmessage`, payload,\n                    { headers: headers }\n                ).then((response)=> {\n                    resolve(response.data.messages);\n\n                }).catch((error)=> {\n                    console.log(error);\n                    reject(error)\n\n                });\n            });\n        },\n        fetchmessages({commit}, payload) {\n            return new Promise(async (resolve, reject) => {\n                const headers = {'x-access-token':`Bearer ${this.state.token}`}\n                \n                await axios.get(`${baseURL}/chat/${payload}`,\n                    { headers: headers }\n                ).then((response)=> {\n                    resolve(response.data.messages);\n\n                }).catch((error)=> {\n                    console.log(error);\n                    reject(error)\n\n                });\n            });\n        },\n        fetchuser({commit}, payload) {\n            return new Promise( async (resolve, reject)=> {\n                const headers = {'x-access-token':`Bearer ${this.state.token}`};\n\n                await axios.get(\n                    `${baseURL}/user/profile/${payload}`,\n                    { headers: headers }\n                )\n                .then((response)=> {\n                    resolve(response.data.user);\n                })\n                .catch((error)=> {\n                    reject(error);\n                });\n            });\n        },\n        setupclass({commit}, payload) {\n            return new Promise((resolve, reject)=> {\n                commit('save_class_info', payload);\n                resolve();\n            })\n        },\n        edittutorprofile({commit}, payload) {\n            return new Promise( async (resolve, reject)=> {\n                const headers = {'x-access-token':`Bearer ${this.state.token}`},\n                endpoint = `${baseURL}/tutors/edit/`;\n                \n                await axios.post(endpoint, payload, { headers: headers })\n                .then((response)=> resolve(response.data.user))\n                .catch((error)=> reject(error));\n            });\n        },\n        clearrole({commit}){\n            commit('clear_user_role');\n        },\n        storecommunitylanguage({commit}, payload) {\n            return new Promise((resolve, reject)=> {\n                commit('store_community_language', payload);\n                resolve();\n            });\n        },\n        fetchcommunityquestions({commit}) {\n            return new Promise(async (resolve, reject)=> {\n             \n                const url = `${baseURL}/community/questions/${this.state.communityLanguage}`;\n                \n                await axios.get(url)\n                .then((response)=> resolve(response.data.data))\n                .catch((error)=> reject(error));\n            });\n        },\n        fetchcommunityquestion({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n             \n                const url = `${baseURL}/community/question/${payload}`;\n                \n                await axios.get(url)\n                .then((response)=> resolve(response.data.data))\n                .catch((error)=> reject(error));\n            });\n        },\n        createquestion({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                \n                const headers = {'x-access-token':`Bearer ${this.state.token}`},\n                url = `${baseURL}/community/questions/create`;\n                \n                await axios.post(url, payload, \n                { headers: headers })\n                .then((response)=> resolve(response.data.data))\n                .catch((error)=> reject(error));\n            });\n        },\n        submitcomment({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                const headers = {'x-access-token':`Bearer ${this.state.token}`},\n                url = `${baseURL}/community/comment/create`;\n\n                await axios.post(url, payload, { headers: headers })\n                .then((response)=> resolve(response.data.data))\n                .catch((error)=> reject(error));\n            });\n        },\n        fetchcommunitylanguages({commit}) {\n            return new Promise(async (resolve, reject)=> {\n                const url = `${baseURL}/community/languages`;\n\n                await axios.get(url)\n                .then((response)=> {\n                    resolve(response.data.data);\n                })\n                .catch((error)=> reject(error));\n            });\n        },\n        submitcommentreply({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                const headers = {'x-access-token':`Bearer ${this.state.token}`},\n                url = `${baseURL}/community/comment/reply`;\n\n                await axios.post(url, payload, { headers: headers })\n                .then((response)=> resolve(response.data.data))\n                .catch((error)=> reject(error));\n            });\n        },\n        submitreplytoreply({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                const headers = {'x-access-token':`Bearer ${this.state.token}`},\n                url = `${baseURL}/community/comment/replytoreply`;\n\n                await axios.post(url, payload, { headers: headers })\n                .then((response)=> resolve(response.data.data))\n                .catch((error)=> reject(error));\n            });\n        },\n        submitwithdrawalrequest({commit}, payload) {\n            return new Promise(async (resolve, reject)=> {\n                const headers = {'x-access-token':`Bearer ${this.state.token}`},\n                url = `${baseURL}/tutors/withdraw`;\n\n                axios.post(url, payload, { headers: headers })\n                .then((response)=> {\n                    commit('store_tutor', response.data.tutor);\n                    resolve(response.data.tutor);\n                })\n                .catch((error)=> {\n                    console.log(error)\n                    reject(error)\n                });\n            });\n        }\n    },\n    getters: { \n        registrationRole: state => state.role,\n        tempRoute: state => state.tempRoute,\n        isSignedIn: state => state.isSignedIn,\n        userData: state => state.user,\n        tutorData: state => state.tutor,\n        tutors: state => state.tutors,\n        token: state => state.token,\n        bookingData: state => (state.bookingInfo == '') ?JSON.parse(localStorage.getItem('bookinginfo')) : state.bookingInfo,\n        classData: state => state.class,\n        communityLanguage: state => state.communityLanguage,\n        communityLanguages: state => state.communityLanguages\n    }\n\n});"]}]}