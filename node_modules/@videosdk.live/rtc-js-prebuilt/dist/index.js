var VideoSDKMeeting = /*#__PURE__*/function () {
  function VideoSDKMeeting() {}

  var _proto = VideoSDKMeeting.prototype;

  _proto.init = function init(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        micEnabled = _ref.micEnabled,
        webcamEnabled = _ref.webcamEnabled,
        name = _ref.name,
        meetingId = _ref.meetingId,
        redirectOnLeave = _ref.redirectOnLeave,
        chatEnabled = _ref.chatEnabled,
        screenShareEnabled = _ref.screenShareEnabled,
        pollEnabled = _ref.pollEnabled,
        whiteboardEnabled = _ref.whiteboardEnabled,
        participantCanToggleSelfWebcam = _ref.participantCanToggleSelfWebcam,
        participantCanToggleSelfMic = _ref.participantCanToggleSelfMic,
        raiseHandEnabled = _ref.raiseHandEnabled,
        containerId = _ref.containerId,
        recordingEnabled = _ref.recordingEnabled,
        recordingWebhookUrl = _ref.recordingWebhookUrl,
        recordingAWSDirPath = _ref.recordingAWSDirPath,
        autoStartRecording = _ref.autoStartRecording,
        old_participantCanToggleRecording = _ref.participantCanToggleRecording,
        brandingEnabled = _ref.brandingEnabled,
        brandLogoURL = _ref.brandLogoURL,
        brandName = _ref.brandName,
        apiKey = _ref.apiKey,
        participantCanLeave = _ref.participantCanLeave,
        poweredBy = _ref.poweredBy,
        livestream = _ref.livestream,
        joinScreen = _ref.joinScreen,
        initPermissions = _ref.permissions,
        notificationSoundEnabled = _ref.notificationSoundEnabled,
        pin = _ref.pin;

    try {
      if (!livestream) livestream = {};
      if (!initPermissions) initPermissions = {};
      if (!joinScreen) joinScreen = {};
      var _initPermissions = initPermissions,
          askJoin = _initPermissions.askToJoin,
          participantCanToggleOtherWebcam = _initPermissions.toggleParticipantWebcam,
          participantCanToggleOtherMic = _initPermissions.toggleParticipantMic,
          canRemoveOtherParticipant = _initPermissions.removeParticipant,
          canEndMeeting = _initPermissions.endMeeting,
          canDrawOnWhiteboard = _initPermissions.drawOnWhiteboard,
          canToggleWhiteboard = _initPermissions.toggleWhiteboard,
          participantCanToggleRecording = _initPermissions.toggleRecording;

      if (askJoin) {
        participantCanToggleOtherWebcam = false;
        participantCanToggleOtherMic = false;
      }

      var _livestream = livestream,
          liveStreamEnabled = _livestream.visible,
          autoStartLiveStream = _livestream.autoStart,
          liveStreamOutputs = _livestream.outputs;
      var _joinScreen = joinScreen,
          joinScreenEnabled = _joinScreen.visible,
          joinScreenMeetingUrl = _joinScreen.meetingUrl,
          joinScreenTitle = _joinScreen.title;
      var canPin = (pin === null || pin === void 0 ? void 0 : pin.allowed) || false;
      var layout = (pin === null || pin === void 0 ? void 0 : pin.layout) || "GRID";

      if (!apiKey) {
        throw new Error("'apiKey' not provided!");
      }

      var BASE_URL = "https://api.zujonow.com";
      var urlToken = BASE_URL + "/v1/prebuilt/token";
      var permissions = [];

      if (askJoin) {
        permissions.push("ask_join");
      } else {
        permissions.push("allow_join");
      }

      var tokenBody = {
        apiKey: apiKey
      };

      if (permissions.length) {
        tokenBody["permissions"] = permissions;
      }

      return Promise.resolve(fetch(urlToken, {
        method: "POST",
        headers: {
          "Content-type": "application/json"
        },
        body: JSON.stringify(tokenBody)
      })).then(function (res) {
        return Promise.resolve(res.json()).then(function (json) {
          var token = json.token;
          var myDocument = parent.document;
          var myWindow = parent.window;

          if (typeof myWindow === "undefined" || typeof myDocument === "undefined") {
            throw new Error("No browser detected!");
          }

          var iframe_id = "videosdk-frame";
          var meetingFrame = myDocument.createElement("iframe");
          meetingFrame.id = iframe_id;
          var iframe_src = "https://embed.videosdk.live/rtc-js-prebuilt/0.1.19/?micEnabled=" + encodeURIComponent(micEnabled ? "true" : "false") + "&webcamEnabled=" + encodeURIComponent(webcamEnabled ? "true" : "false") + "&name=" + encodeURIComponent(name) + "&meetingId=" + encodeURIComponent(meetingId) + "&redirectOnLeave=" + encodeURIComponent(redirectOnLeave) + "&chatEnabled=" + encodeURIComponent(chatEnabled ? "true" : "false") + "&screenShareEnabled=" + encodeURIComponent(screenShareEnabled ? "true" : "false") + "&pollEnabled=" + encodeURIComponent(pollEnabled ? "true" : "false") + "&whiteboardEnabled=" + encodeURIComponent(whiteboardEnabled ? "true" : "false") + "&participantCanToggleSelfWebcam=" + encodeURIComponent(participantCanToggleSelfWebcam ? "true" : "false") + "&participantCanToggleSelfMic=" + encodeURIComponent(participantCanToggleSelfMic ? "true" : "false") + "&raiseHandEnabled=" + encodeURIComponent(raiseHandEnabled ? "true" : "false") + "&token=" + encodeURIComponent(token) + "&recordingEnabled=" + encodeURIComponent(recordingEnabled ? "true" : "false") + "&recordingWebhookUrl=" + encodeURIComponent(recordingWebhookUrl || "") + "&recordingAWSDirPath=" + encodeURIComponent(recordingAWSDirPath || "") + "&autoStartRecording=" + encodeURIComponent(autoStartRecording ? "true" : "false") + "&participantCanToggleRecording=" + encodeURIComponent(typeof participantCanToggleRecording === "boolean" ? participantCanToggleRecording ? "true" : "false" : typeof old_participantCanToggleRecording === "boolean" ? old_participantCanToggleRecording : false) + "&brandingEnabled=" + encodeURIComponent(brandingEnabled ? "true" : "false") + "&brandLogoURL=" + encodeURIComponent(brandLogoURL || "") + "&brandName=" + encodeURIComponent(brandName) + "&participantCanLeave=" + encodeURIComponent(typeof participantCanLeave === "boolean" ? participantCanLeave ? "true" : "false" : "true") + "&poweredBy=" + encodeURIComponent(typeof poweredBy === "boolean" ? poweredBy ? "true" : "false" : "true") + "&liveStreamEnabled=" + encodeURIComponent(liveStreamEnabled ? "true" : "false") + "&autoStartLiveStream=" + encodeURIComponent(autoStartLiveStream ? "true" : "false") + "&liveStreamOutputs=" + encodeURIComponent(JSON.stringify(liveStreamOutputs || [])) + "&participantCanToggleOtherMic=" + encodeURIComponent(participantCanToggleOtherMic ? "true" : "false") + "&participantCanToggleOtherWebcam=" + encodeURIComponent(participantCanToggleOtherWebcam ? "true" : "false") + "&askJoin=" + encodeURIComponent(askJoin ? "true" : "false") + "&joinScreenEnabled=" + encodeURIComponent(joinScreenEnabled ? "true" : "false") + "&joinScreenMeetingUrl=" + encodeURIComponent(joinScreenMeetingUrl || "") + "&joinScreenTitle=" + encodeURIComponent(joinScreenTitle || "") + "&notificationSoundEnabled=" + encodeURIComponent(typeof notificationSoundEnabled === "boolean" ? notificationSoundEnabled ? "true" : "false" : "true") + "&canPin=" + encodeURIComponent(canPin ? "true" : "false") + "&layout=" + encodeURIComponent(layout) + "&canEndMeeting=" + encodeURIComponent(typeof canEndMeeting === "boolean" ? canEndMeeting ? "true" : "false" : "false") + "&canDrawOnWhiteboard=" + encodeURIComponent(typeof canDrawOnWhiteboard === "boolean" ? canDrawOnWhiteboard ? "true" : "false" : "true") + "&canToggleWhiteboard=" + encodeURIComponent(typeof canToggleWhiteboard === "boolean" ? canToggleWhiteboard ? "true" : "false" : "true") + "&canRemoveOtherParticipant=" + encodeURIComponent(typeof canRemoveOtherParticipant === "boolean" ? canRemoveOtherParticipant ? "true" : "false" : "false");
          meetingFrame.src = iframe_src;
          meetingFrame.allowfullscreen = true;
          meetingFrame.width = "100%";
          meetingFrame.height = "100%";
          meetingFrame.allow = "camera *; microphone *; fullscreen; display-capture; allow-same-origin; allow-presentation; encrypted-media; midi; encrypted-media ";
          meetingFrame.style.border = 0;
          meetingFrame.allowusermedia = "allowusermedia";
          var iframeContainer = null;

          if (containerId) {
            var container = myDocument.getElementById(containerId);

            if (!container) {
              throw new Error("No Container found with id " + containerId);
            }

            iframeContainer = container;
            container.appendChild(meetingFrame);
          } else {
            var _container = myDocument.createElement("div");

            _container.style.position = "fixed";
            _container.style.left = 0;
            _container.style.right = 0;
            _container.style.bottom = 0;
            _container.style.top = 0;
            iframeContainer = _container;

            _container.appendChild(meetingFrame);

            myDocument.body.style.margin = "0px";
            myDocument.body.style.padding = "0px";
            myDocument.body.style.height = "100%";
            myDocument.body.style.overflow = "hidden";
            myDocument.body.appendChild(_container);
          }

          myWindow.addEventListener("popstate", function (e) {
            iframeContainer.remove();
          });
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  return VideoSDKMeeting;
}();

exports.VideoSDKMeeting = VideoSDKMeeting;
//# sourceMappingURL=index.js.map
